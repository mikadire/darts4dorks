import os
import logging
from logging.handlers import SMTPHandler, RotatingFileHandler
from flask import Flask
import sqlalchemy as sa
import sqlalchemy.orm as so
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager
from flask_mail import Mail
from config import Config
from darts4dorks.utils import StdDev

db = SQLAlchemy(add_models_to_shell=True)
migrate = Migrate()
login_manager = LoginManager()
login_manager.login_view = "auth.login"
mail = Mail()


def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(Config)
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    mail.init_app(app)

    from darts4dorks.errors import bp as errors_bp

    app.register_blueprint(errors_bp)

    from darts4dorks.main import bp as main

    app.register_blueprint(main)

    from darts4dorks.auth import bp as auth_bp

    app.register_blueprint(auth_bp)

    from darts4dorks.user import bp as user_bp

    app.register_blueprint(user_bp)

    from darts4dorks.api import bp as api_bp

    app.register_blueprint(api_bp)

    # Defines commands in 'flask shell' REPL
    @app.shell_context_processor
    def make_shell_context():
        return {"sa": sa, "so": so}

    # Adds StdDev function to SQLite
    with app.app_context():
        if db.engine.name == "sqlite":
            db.engine.raw_connection().create_aggregate("stddev", 1, StdDev)

    if not app.debug:
        if app.config["MAIL_SERVER"]:
            auth = None
            if app.config["MAIL_USERNAME"] or app.config["MAIL_PASSWORD"]:
                auth = (app.config["MAIL_USERNAME"], app.config["MAIL_PASSWORD"])
            secure = None
            if app.config["MAIL_USE_TLS"]:
                secure = ()
            mail_handler = SMTPHandler(
                mailhost=(app.config["MAIL_SERVER"], app.config["MAIL_PORT"]),
                fromaddr="no-reply@" + app.config["MAIL_SERVER"],
                toaddrs=app.config["ADMINS"],
                subject="Darts for Dorks Failure",
                credentials=auth,
                secure=secure,
            )
            mail_handler.setLevel(logging.ERROR)
            app.logger.addHandler(mail_handler)

        if not os.path.exists("logs"):
            os.mkdir("logs")
        file_handler = RotatingFileHandler(
            "logs/darts4dorks.log", maxBytes=10240, backupCount=10
        )
        file_handler.setFormatter(
            logging.Formatter(
                "%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]"
            )
        )
        file_handler.setLevel(logging.INFO)
        app.logger.addHandler(file_handler)

        app.logger.setLevel(logging.INFO)
        app.logger.info("Darts for Dorks startup")

    if app.debug:  # Output SQL generated by SQLAlchemy to stdout
        logging.basicConfig()
        logging.getLogger("sqlalchemy.engine").setLevel(logging.INFO)

    return app


from darts4dorks import models
